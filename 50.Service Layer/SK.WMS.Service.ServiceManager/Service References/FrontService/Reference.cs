//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NEXCORE.Service.ServiceManager.FrontService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FrontService.IFrontService")]
    public interface IFrontService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFrontService/DoWork", ReplyAction="http://tempuri.org/IFrontService/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFrontService/DoWork", ReplyAction="http://tempuri.org/IFrontService/DoWorkResponse")]
        System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState);
        
        void EndDoWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFrontService/InvokeService", ReplyAction="http://tempuri.org/IFrontService/InvokeServiceResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Drawing.Image))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NEXCORE.Common.Data.Menu))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<NEXCORE.Common.Data.Menu>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<object, object>))]
        NEXCORE.Common.Data.NEXCOREData InvokeService(string fullName, string methodName, NEXCORE.Common.Data.NEXCOREData paras);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFrontService/InvokeService", ReplyAction="http://tempuri.org/IFrontService/InvokeServiceResponse")]
        System.IAsyncResult BeginInvokeService(string fullName, string methodName, NEXCORE.Common.Data.NEXCOREData paras, System.AsyncCallback callback, object asyncState);
        
        NEXCORE.Common.Data.NEXCOREData EndInvokeService(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFrontService/InvokeTransactionService", ReplyAction="http://tempuri.org/IFrontService/InvokeTransactionServiceResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Drawing.Image))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NEXCORE.Common.Data.Menu))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<NEXCORE.Common.Data.Menu>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<object, object>))]
        NEXCORE.Common.Data.NEXCOREData InvokeTransactionService(string fullName, string methodName, NEXCORE.Common.Data.NEXCOREData paras);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFrontService/InvokeTransactionService", ReplyAction="http://tempuri.org/IFrontService/InvokeTransactionServiceResponse")]
        System.IAsyncResult BeginInvokeTransactionService(string fullName, string methodName, NEXCORE.Common.Data.NEXCOREData paras, System.AsyncCallback callback, object asyncState);
        
        NEXCORE.Common.Data.NEXCOREData EndInvokeTransactionService(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFrontService/UnloadApplicationDomainLibrary", ReplyAction="http://tempuri.org/IFrontService/UnloadApplicationDomainLibraryResponse")]
        void UnloadApplicationDomainLibrary();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFrontService/UnloadApplicationDomainLibrary", ReplyAction="http://tempuri.org/IFrontService/UnloadApplicationDomainLibraryResponse")]
        System.IAsyncResult BeginUnloadApplicationDomainLibrary(System.AsyncCallback callback, object asyncState);
        
        void EndUnloadApplicationDomainLibrary(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFrontServiceChannel : NEXCORE.Service.ServiceManager.FrontService.IFrontService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InvokeServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InvokeServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NEXCORE.Common.Data.NEXCOREData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NEXCORE.Common.Data.NEXCOREData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InvokeTransactionServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InvokeTransactionServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NEXCORE.Common.Data.NEXCOREData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NEXCORE.Common.Data.NEXCOREData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FrontServiceClient : System.ServiceModel.ClientBase<NEXCORE.Service.ServiceManager.FrontService.IFrontService>, NEXCORE.Service.ServiceManager.FrontService.IFrontService {
        
        private BeginOperationDelegate onBeginDoWorkDelegate;
        
        private EndOperationDelegate onEndDoWorkDelegate;
        
        private System.Threading.SendOrPostCallback onDoWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginInvokeServiceDelegate;
        
        private EndOperationDelegate onEndInvokeServiceDelegate;
        
        private System.Threading.SendOrPostCallback onInvokeServiceCompletedDelegate;
        
        private BeginOperationDelegate onBeginInvokeTransactionServiceDelegate;
        
        private EndOperationDelegate onEndInvokeTransactionServiceDelegate;
        
        private System.Threading.SendOrPostCallback onInvokeTransactionServiceCompletedDelegate;
        
        private BeginOperationDelegate onBeginUnloadApplicationDomainLibraryDelegate;
        
        private EndOperationDelegate onEndUnloadApplicationDomainLibraryDelegate;
        
        private System.Threading.SendOrPostCallback onUnloadApplicationDomainLibraryCompletedDelegate;
        
        public FrontServiceClient() {
        }
        
        public FrontServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FrontServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FrontServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FrontServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DoWorkCompleted;
        
        public event System.EventHandler<InvokeServiceCompletedEventArgs> InvokeServiceCompleted;
        
        public event System.EventHandler<InvokeTransactionServiceCompletedEventArgs> InvokeTransactionServiceCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UnloadApplicationDomainLibraryCompleted;
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoWork(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDoWork(System.IAsyncResult result) {
            base.Channel.EndDoWork(result);
        }
        
        private System.IAsyncResult OnBeginDoWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginDoWork(callback, asyncState);
        }
        
        private object[] OnEndDoWork(System.IAsyncResult result) {
            this.EndDoWork(result);
            return null;
        }
        
        private void OnDoWorkCompleted(object state) {
            if ((this.DoWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoWorkAsync() {
            this.DoWorkAsync(null);
        }
        
        public void DoWorkAsync(object userState) {
            if ((this.onBeginDoWorkDelegate == null)) {
                this.onBeginDoWorkDelegate = new BeginOperationDelegate(this.OnBeginDoWork);
            }
            if ((this.onEndDoWorkDelegate == null)) {
                this.onEndDoWorkDelegate = new EndOperationDelegate(this.OnEndDoWork);
            }
            if ((this.onDoWorkCompletedDelegate == null)) {
                this.onDoWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoWorkCompleted);
            }
            base.InvokeAsync(this.onBeginDoWorkDelegate, null, this.onEndDoWorkDelegate, this.onDoWorkCompletedDelegate, userState);
        }
        
        public NEXCORE.Common.Data.NEXCOREData InvokeService(string fullName, string methodName, NEXCORE.Common.Data.NEXCOREData paras) {
            return base.Channel.InvokeService(fullName, methodName, paras);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInvokeService(string fullName, string methodName, NEXCORE.Common.Data.NEXCOREData paras, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInvokeService(fullName, methodName, paras, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public NEXCORE.Common.Data.NEXCOREData EndInvokeService(System.IAsyncResult result) {
            return base.Channel.EndInvokeService(result);
        }
        
        private System.IAsyncResult OnBeginInvokeService(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fullName = ((string)(inValues[0]));
            string methodName = ((string)(inValues[1]));
            NEXCORE.Common.Data.NEXCOREData paras = ((NEXCORE.Common.Data.NEXCOREData)(inValues[2]));
            return this.BeginInvokeService(fullName, methodName, paras, callback, asyncState);
        }
        
        private object[] OnEndInvokeService(System.IAsyncResult result) {
            NEXCORE.Common.Data.NEXCOREData retVal = this.EndInvokeService(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInvokeServiceCompleted(object state) {
            if ((this.InvokeServiceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InvokeServiceCompleted(this, new InvokeServiceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InvokeServiceAsync(string fullName, string methodName, NEXCORE.Common.Data.NEXCOREData paras) {
            this.InvokeServiceAsync(fullName, methodName, paras, null);
        }
        
        public void InvokeServiceAsync(string fullName, string methodName, NEXCORE.Common.Data.NEXCOREData paras, object userState) {
            if ((this.onBeginInvokeServiceDelegate == null)) {
                this.onBeginInvokeServiceDelegate = new BeginOperationDelegate(this.OnBeginInvokeService);
            }
            if ((this.onEndInvokeServiceDelegate == null)) {
                this.onEndInvokeServiceDelegate = new EndOperationDelegate(this.OnEndInvokeService);
            }
            if ((this.onInvokeServiceCompletedDelegate == null)) {
                this.onInvokeServiceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInvokeServiceCompleted);
            }
            base.InvokeAsync(this.onBeginInvokeServiceDelegate, new object[] {
                        fullName,
                        methodName,
                        paras}, this.onEndInvokeServiceDelegate, this.onInvokeServiceCompletedDelegate, userState);
        }
        
        public NEXCORE.Common.Data.NEXCOREData InvokeTransactionService(string fullName, string methodName, NEXCORE.Common.Data.NEXCOREData paras) {
            return base.Channel.InvokeTransactionService(fullName, methodName, paras);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInvokeTransactionService(string fullName, string methodName, NEXCORE.Common.Data.NEXCOREData paras, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInvokeTransactionService(fullName, methodName, paras, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public NEXCORE.Common.Data.NEXCOREData EndInvokeTransactionService(System.IAsyncResult result) {
            return base.Channel.EndInvokeTransactionService(result);
        }
        
        private System.IAsyncResult OnBeginInvokeTransactionService(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fullName = ((string)(inValues[0]));
            string methodName = ((string)(inValues[1]));
            NEXCORE.Common.Data.NEXCOREData paras = ((NEXCORE.Common.Data.NEXCOREData)(inValues[2]));
            return this.BeginInvokeTransactionService(fullName, methodName, paras, callback, asyncState);
        }
        
        private object[] OnEndInvokeTransactionService(System.IAsyncResult result) {
            NEXCORE.Common.Data.NEXCOREData retVal = this.EndInvokeTransactionService(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInvokeTransactionServiceCompleted(object state) {
            if ((this.InvokeTransactionServiceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InvokeTransactionServiceCompleted(this, new InvokeTransactionServiceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InvokeTransactionServiceAsync(string fullName, string methodName, NEXCORE.Common.Data.NEXCOREData paras) {
            this.InvokeTransactionServiceAsync(fullName, methodName, paras, null);
        }
        
        public void InvokeTransactionServiceAsync(string fullName, string methodName, NEXCORE.Common.Data.NEXCOREData paras, object userState) {
            if ((this.onBeginInvokeTransactionServiceDelegate == null)) {
                this.onBeginInvokeTransactionServiceDelegate = new BeginOperationDelegate(this.OnBeginInvokeTransactionService);
            }
            if ((this.onEndInvokeTransactionServiceDelegate == null)) {
                this.onEndInvokeTransactionServiceDelegate = new EndOperationDelegate(this.OnEndInvokeTransactionService);
            }
            if ((this.onInvokeTransactionServiceCompletedDelegate == null)) {
                this.onInvokeTransactionServiceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInvokeTransactionServiceCompleted);
            }
            base.InvokeAsync(this.onBeginInvokeTransactionServiceDelegate, new object[] {
                        fullName,
                        methodName,
                        paras}, this.onEndInvokeTransactionServiceDelegate, this.onInvokeTransactionServiceCompletedDelegate, userState);
        }
        
        public void UnloadApplicationDomainLibrary() {
            base.Channel.UnloadApplicationDomainLibrary();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUnloadApplicationDomainLibrary(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUnloadApplicationDomainLibrary(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUnloadApplicationDomainLibrary(System.IAsyncResult result) {
            base.Channel.EndUnloadApplicationDomainLibrary(result);
        }
        
        private System.IAsyncResult OnBeginUnloadApplicationDomainLibrary(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginUnloadApplicationDomainLibrary(callback, asyncState);
        }
        
        private object[] OnEndUnloadApplicationDomainLibrary(System.IAsyncResult result) {
            this.EndUnloadApplicationDomainLibrary(result);
            return null;
        }
        
        private void OnUnloadApplicationDomainLibraryCompleted(object state) {
            if ((this.UnloadApplicationDomainLibraryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UnloadApplicationDomainLibraryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UnloadApplicationDomainLibraryAsync() {
            this.UnloadApplicationDomainLibraryAsync(null);
        }
        
        public void UnloadApplicationDomainLibraryAsync(object userState) {
            if ((this.onBeginUnloadApplicationDomainLibraryDelegate == null)) {
                this.onBeginUnloadApplicationDomainLibraryDelegate = new BeginOperationDelegate(this.OnBeginUnloadApplicationDomainLibrary);
            }
            if ((this.onEndUnloadApplicationDomainLibraryDelegate == null)) {
                this.onEndUnloadApplicationDomainLibraryDelegate = new EndOperationDelegate(this.OnEndUnloadApplicationDomainLibrary);
            }
            if ((this.onUnloadApplicationDomainLibraryCompletedDelegate == null)) {
                this.onUnloadApplicationDomainLibraryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUnloadApplicationDomainLibraryCompleted);
            }
            base.InvokeAsync(this.onBeginUnloadApplicationDomainLibraryDelegate, null, this.onEndUnloadApplicationDomainLibraryDelegate, this.onUnloadApplicationDomainLibraryCompletedDelegate, userState);
        }
    }
}
