//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NEXCORE.Service.ServiceManager.MessageService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MessageService.IMessageService")]
    public interface IMessageService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/DoWork", ReplyAction="http://tempuri.org/IMessageService/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMessageService/DoWork", ReplyAction="http://tempuri.org/IMessageService/DoWorkResponse")]
        System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState);
        
        void EndDoWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/Contains", ReplyAction="http://tempuri.org/IMessageService/ContainsResponse")]
        bool Contains(string msgID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMessageService/Contains", ReplyAction="http://tempuri.org/IMessageService/ContainsResponse")]
        System.IAsyncResult BeginContains(string msgID, System.AsyncCallback callback, object asyncState);
        
        bool EndContains(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/GetMessage", ReplyAction="http://tempuri.org/IMessageService/GetMessageResponse")]
        string GetMessage(string msgID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMessageService/GetMessage", ReplyAction="http://tempuri.org/IMessageService/GetMessageResponse")]
        System.IAsyncResult BeginGetMessage(string msgID, System.AsyncCallback callback, object asyncState);
        
        string EndGetMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/GetMessageList", ReplyAction="http://tempuri.org/IMessageService/GetMessageListResponse")]
        System.Collections.Generic.List<NEXCORE.Common.Data.Message> GetMessageList(string msgID, string msgNm);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMessageService/GetMessageList", ReplyAction="http://tempuri.org/IMessageService/GetMessageListResponse")]
        System.IAsyncResult BeginGetMessageList(string msgID, string msgNm, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<NEXCORE.Common.Data.Message> EndGetMessageList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/GetMessageObject", ReplyAction="http://tempuri.org/IMessageService/GetMessageObjectResponse")]
        NEXCORE.Common.Data.Message GetMessageObject(string msgID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMessageService/GetMessageObject", ReplyAction="http://tempuri.org/IMessageService/GetMessageObjectResponse")]
        System.IAsyncResult BeginGetMessageObject(string msgID, System.AsyncCallback callback, object asyncState);
        
        NEXCORE.Common.Data.Message EndGetMessageObject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/GetMessageLocale", ReplyAction="http://tempuri.org/IMessageService/GetMessageLocaleResponse")]
        string GetMessageLocale(string msgID, string locale);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMessageService/GetMessageLocale", ReplyAction="http://tempuri.org/IMessageService/GetMessageLocaleResponse")]
        System.IAsyncResult BeginGetMessageLocale(string msgID, string locale, System.AsyncCallback callback, object asyncState);
        
        string EndGetMessageLocale(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/AddMessage", ReplyAction="http://tempuri.org/IMessageService/AddMessageResponse")]
        void AddMessage(string msgID, string msgNm);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMessageService/AddMessage", ReplyAction="http://tempuri.org/IMessageService/AddMessageResponse")]
        System.IAsyncResult BeginAddMessage(string msgID, string msgNm, System.AsyncCallback callback, object asyncState);
        
        void EndAddMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/UpdateMessage", ReplyAction="http://tempuri.org/IMessageService/UpdateMessageResponse")]
        void UpdateMessage(string msgID, string msgNm);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMessageService/UpdateMessage", ReplyAction="http://tempuri.org/IMessageService/UpdateMessageResponse")]
        System.IAsyncResult BeginUpdateMessage(string msgID, string msgNm, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/DeleteMessage", ReplyAction="http://tempuri.org/IMessageService/DeleteMessageResponse")]
        void DeleteMessage(string msgID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMessageService/DeleteMessage", ReplyAction="http://tempuri.org/IMessageService/DeleteMessageResponse")]
        System.IAsyncResult BeginDeleteMessage(string msgID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/Reload", ReplyAction="http://tempuri.org/IMessageService/ReloadResponse")]
        void Reload();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMessageService/Reload", ReplyAction="http://tempuri.org/IMessageService/ReloadResponse")]
        System.IAsyncResult BeginReload(System.AsyncCallback callback, object asyncState);
        
        void EndReload(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMessageServiceChannel : NEXCORE.Service.ServiceManager.MessageService.IMessageService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContainsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ContainsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMessageListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMessageListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<NEXCORE.Common.Data.Message> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<NEXCORE.Common.Data.Message>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMessageObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMessageObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NEXCORE.Common.Data.Message Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NEXCORE.Common.Data.Message)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMessageLocaleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMessageLocaleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MessageServiceClient : System.ServiceModel.ClientBase<NEXCORE.Service.ServiceManager.MessageService.IMessageService>, NEXCORE.Service.ServiceManager.MessageService.IMessageService {
        
        private BeginOperationDelegate onBeginDoWorkDelegate;
        
        private EndOperationDelegate onEndDoWorkDelegate;
        
        private System.Threading.SendOrPostCallback onDoWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginContainsDelegate;
        
        private EndOperationDelegate onEndContainsDelegate;
        
        private System.Threading.SendOrPostCallback onContainsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMessageDelegate;
        
        private EndOperationDelegate onEndGetMessageDelegate;
        
        private System.Threading.SendOrPostCallback onGetMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMessageListDelegate;
        
        private EndOperationDelegate onEndGetMessageListDelegate;
        
        private System.Threading.SendOrPostCallback onGetMessageListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMessageObjectDelegate;
        
        private EndOperationDelegate onEndGetMessageObjectDelegate;
        
        private System.Threading.SendOrPostCallback onGetMessageObjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMessageLocaleDelegate;
        
        private EndOperationDelegate onEndGetMessageLocaleDelegate;
        
        private System.Threading.SendOrPostCallback onGetMessageLocaleCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddMessageDelegate;
        
        private EndOperationDelegate onEndAddMessageDelegate;
        
        private System.Threading.SendOrPostCallback onAddMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateMessageDelegate;
        
        private EndOperationDelegate onEndUpdateMessageDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteMessageDelegate;
        
        private EndOperationDelegate onEndDeleteMessageDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginReloadDelegate;
        
        private EndOperationDelegate onEndReloadDelegate;
        
        private System.Threading.SendOrPostCallback onReloadCompletedDelegate;
        
        public MessageServiceClient() {
        }
        
        public MessageServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MessageServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MessageServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MessageServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DoWorkCompleted;
        
        public event System.EventHandler<ContainsCompletedEventArgs> ContainsCompleted;
        
        public event System.EventHandler<GetMessageCompletedEventArgs> GetMessageCompleted;
        
        public event System.EventHandler<GetMessageListCompletedEventArgs> GetMessageListCompleted;
        
        public event System.EventHandler<GetMessageObjectCompletedEventArgs> GetMessageObjectCompleted;
        
        public event System.EventHandler<GetMessageLocaleCompletedEventArgs> GetMessageLocaleCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddMessageCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateMessageCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteMessageCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ReloadCompleted;
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoWork(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDoWork(System.IAsyncResult result) {
            base.Channel.EndDoWork(result);
        }
        
        private System.IAsyncResult OnBeginDoWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginDoWork(callback, asyncState);
        }
        
        private object[] OnEndDoWork(System.IAsyncResult result) {
            this.EndDoWork(result);
            return null;
        }
        
        private void OnDoWorkCompleted(object state) {
            if ((this.DoWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoWorkAsync() {
            this.DoWorkAsync(null);
        }
        
        public void DoWorkAsync(object userState) {
            if ((this.onBeginDoWorkDelegate == null)) {
                this.onBeginDoWorkDelegate = new BeginOperationDelegate(this.OnBeginDoWork);
            }
            if ((this.onEndDoWorkDelegate == null)) {
                this.onEndDoWorkDelegate = new EndOperationDelegate(this.OnEndDoWork);
            }
            if ((this.onDoWorkCompletedDelegate == null)) {
                this.onDoWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoWorkCompleted);
            }
            base.InvokeAsync(this.onBeginDoWorkDelegate, null, this.onEndDoWorkDelegate, this.onDoWorkCompletedDelegate, userState);
        }
        
        public bool Contains(string msgID) {
            return base.Channel.Contains(msgID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginContains(string msgID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginContains(msgID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndContains(System.IAsyncResult result) {
            return base.Channel.EndContains(result);
        }
        
        private System.IAsyncResult OnBeginContains(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string msgID = ((string)(inValues[0]));
            return this.BeginContains(msgID, callback, asyncState);
        }
        
        private object[] OnEndContains(System.IAsyncResult result) {
            bool retVal = this.EndContains(result);
            return new object[] {
                    retVal};
        }
        
        private void OnContainsCompleted(object state) {
            if ((this.ContainsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ContainsCompleted(this, new ContainsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ContainsAsync(string msgID) {
            this.ContainsAsync(msgID, null);
        }
        
        public void ContainsAsync(string msgID, object userState) {
            if ((this.onBeginContainsDelegate == null)) {
                this.onBeginContainsDelegate = new BeginOperationDelegate(this.OnBeginContains);
            }
            if ((this.onEndContainsDelegate == null)) {
                this.onEndContainsDelegate = new EndOperationDelegate(this.OnEndContains);
            }
            if ((this.onContainsCompletedDelegate == null)) {
                this.onContainsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnContainsCompleted);
            }
            base.InvokeAsync(this.onBeginContainsDelegate, new object[] {
                        msgID}, this.onEndContainsDelegate, this.onContainsCompletedDelegate, userState);
        }
        
        public string GetMessage(string msgID) {
            return base.Channel.GetMessage(msgID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMessage(string msgID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMessage(msgID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetMessage(System.IAsyncResult result) {
            return base.Channel.EndGetMessage(result);
        }
        
        private System.IAsyncResult OnBeginGetMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string msgID = ((string)(inValues[0]));
            return this.BeginGetMessage(msgID, callback, asyncState);
        }
        
        private object[] OnEndGetMessage(System.IAsyncResult result) {
            string retVal = this.EndGetMessage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMessageCompleted(object state) {
            if ((this.GetMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMessageCompleted(this, new GetMessageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMessageAsync(string msgID) {
            this.GetMessageAsync(msgID, null);
        }
        
        public void GetMessageAsync(string msgID, object userState) {
            if ((this.onBeginGetMessageDelegate == null)) {
                this.onBeginGetMessageDelegate = new BeginOperationDelegate(this.OnBeginGetMessage);
            }
            if ((this.onEndGetMessageDelegate == null)) {
                this.onEndGetMessageDelegate = new EndOperationDelegate(this.OnEndGetMessage);
            }
            if ((this.onGetMessageCompletedDelegate == null)) {
                this.onGetMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMessageCompleted);
            }
            base.InvokeAsync(this.onBeginGetMessageDelegate, new object[] {
                        msgID}, this.onEndGetMessageDelegate, this.onGetMessageCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<NEXCORE.Common.Data.Message> GetMessageList(string msgID, string msgNm) {
            return base.Channel.GetMessageList(msgID, msgNm);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMessageList(string msgID, string msgNm, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMessageList(msgID, msgNm, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<NEXCORE.Common.Data.Message> EndGetMessageList(System.IAsyncResult result) {
            return base.Channel.EndGetMessageList(result);
        }
        
        private System.IAsyncResult OnBeginGetMessageList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string msgID = ((string)(inValues[0]));
            string msgNm = ((string)(inValues[1]));
            return this.BeginGetMessageList(msgID, msgNm, callback, asyncState);
        }
        
        private object[] OnEndGetMessageList(System.IAsyncResult result) {
            System.Collections.Generic.List<NEXCORE.Common.Data.Message> retVal = this.EndGetMessageList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMessageListCompleted(object state) {
            if ((this.GetMessageListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMessageListCompleted(this, new GetMessageListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMessageListAsync(string msgID, string msgNm) {
            this.GetMessageListAsync(msgID, msgNm, null);
        }
        
        public void GetMessageListAsync(string msgID, string msgNm, object userState) {
            if ((this.onBeginGetMessageListDelegate == null)) {
                this.onBeginGetMessageListDelegate = new BeginOperationDelegate(this.OnBeginGetMessageList);
            }
            if ((this.onEndGetMessageListDelegate == null)) {
                this.onEndGetMessageListDelegate = new EndOperationDelegate(this.OnEndGetMessageList);
            }
            if ((this.onGetMessageListCompletedDelegate == null)) {
                this.onGetMessageListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMessageListCompleted);
            }
            base.InvokeAsync(this.onBeginGetMessageListDelegate, new object[] {
                        msgID,
                        msgNm}, this.onEndGetMessageListDelegate, this.onGetMessageListCompletedDelegate, userState);
        }
        
        public NEXCORE.Common.Data.Message GetMessageObject(string msgID) {
            return base.Channel.GetMessageObject(msgID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMessageObject(string msgID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMessageObject(msgID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public NEXCORE.Common.Data.Message EndGetMessageObject(System.IAsyncResult result) {
            return base.Channel.EndGetMessageObject(result);
        }
        
        private System.IAsyncResult OnBeginGetMessageObject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string msgID = ((string)(inValues[0]));
            return this.BeginGetMessageObject(msgID, callback, asyncState);
        }
        
        private object[] OnEndGetMessageObject(System.IAsyncResult result) {
            NEXCORE.Common.Data.Message retVal = this.EndGetMessageObject(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMessageObjectCompleted(object state) {
            if ((this.GetMessageObjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMessageObjectCompleted(this, new GetMessageObjectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMessageObjectAsync(string msgID) {
            this.GetMessageObjectAsync(msgID, null);
        }
        
        public void GetMessageObjectAsync(string msgID, object userState) {
            if ((this.onBeginGetMessageObjectDelegate == null)) {
                this.onBeginGetMessageObjectDelegate = new BeginOperationDelegate(this.OnBeginGetMessageObject);
            }
            if ((this.onEndGetMessageObjectDelegate == null)) {
                this.onEndGetMessageObjectDelegate = new EndOperationDelegate(this.OnEndGetMessageObject);
            }
            if ((this.onGetMessageObjectCompletedDelegate == null)) {
                this.onGetMessageObjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMessageObjectCompleted);
            }
            base.InvokeAsync(this.onBeginGetMessageObjectDelegate, new object[] {
                        msgID}, this.onEndGetMessageObjectDelegate, this.onGetMessageObjectCompletedDelegate, userState);
        }
        
        public string GetMessageLocale(string msgID, string locale) {
            return base.Channel.GetMessageLocale(msgID, locale);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMessageLocale(string msgID, string locale, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMessageLocale(msgID, locale, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetMessageLocale(System.IAsyncResult result) {
            return base.Channel.EndGetMessageLocale(result);
        }
        
        private System.IAsyncResult OnBeginGetMessageLocale(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string msgID = ((string)(inValues[0]));
            string locale = ((string)(inValues[1]));
            return this.BeginGetMessageLocale(msgID, locale, callback, asyncState);
        }
        
        private object[] OnEndGetMessageLocale(System.IAsyncResult result) {
            string retVal = this.EndGetMessageLocale(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMessageLocaleCompleted(object state) {
            if ((this.GetMessageLocaleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMessageLocaleCompleted(this, new GetMessageLocaleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMessageLocaleAsync(string msgID, string locale) {
            this.GetMessageLocaleAsync(msgID, locale, null);
        }
        
        public void GetMessageLocaleAsync(string msgID, string locale, object userState) {
            if ((this.onBeginGetMessageLocaleDelegate == null)) {
                this.onBeginGetMessageLocaleDelegate = new BeginOperationDelegate(this.OnBeginGetMessageLocale);
            }
            if ((this.onEndGetMessageLocaleDelegate == null)) {
                this.onEndGetMessageLocaleDelegate = new EndOperationDelegate(this.OnEndGetMessageLocale);
            }
            if ((this.onGetMessageLocaleCompletedDelegate == null)) {
                this.onGetMessageLocaleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMessageLocaleCompleted);
            }
            base.InvokeAsync(this.onBeginGetMessageLocaleDelegate, new object[] {
                        msgID,
                        locale}, this.onEndGetMessageLocaleDelegate, this.onGetMessageLocaleCompletedDelegate, userState);
        }
        
        public void AddMessage(string msgID, string msgNm) {
            base.Channel.AddMessage(msgID, msgNm);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddMessage(string msgID, string msgNm, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddMessage(msgID, msgNm, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddMessage(System.IAsyncResult result) {
            base.Channel.EndAddMessage(result);
        }
        
        private System.IAsyncResult OnBeginAddMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string msgID = ((string)(inValues[0]));
            string msgNm = ((string)(inValues[1]));
            return this.BeginAddMessage(msgID, msgNm, callback, asyncState);
        }
        
        private object[] OnEndAddMessage(System.IAsyncResult result) {
            this.EndAddMessage(result);
            return null;
        }
        
        private void OnAddMessageCompleted(object state) {
            if ((this.AddMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddMessageAsync(string msgID, string msgNm) {
            this.AddMessageAsync(msgID, msgNm, null);
        }
        
        public void AddMessageAsync(string msgID, string msgNm, object userState) {
            if ((this.onBeginAddMessageDelegate == null)) {
                this.onBeginAddMessageDelegate = new BeginOperationDelegate(this.OnBeginAddMessage);
            }
            if ((this.onEndAddMessageDelegate == null)) {
                this.onEndAddMessageDelegate = new EndOperationDelegate(this.OnEndAddMessage);
            }
            if ((this.onAddMessageCompletedDelegate == null)) {
                this.onAddMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddMessageCompleted);
            }
            base.InvokeAsync(this.onBeginAddMessageDelegate, new object[] {
                        msgID,
                        msgNm}, this.onEndAddMessageDelegate, this.onAddMessageCompletedDelegate, userState);
        }
        
        public void UpdateMessage(string msgID, string msgNm) {
            base.Channel.UpdateMessage(msgID, msgNm);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateMessage(string msgID, string msgNm, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateMessage(msgID, msgNm, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateMessage(System.IAsyncResult result) {
            base.Channel.EndUpdateMessage(result);
        }
        
        private System.IAsyncResult OnBeginUpdateMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string msgID = ((string)(inValues[0]));
            string msgNm = ((string)(inValues[1]));
            return this.BeginUpdateMessage(msgID, msgNm, callback, asyncState);
        }
        
        private object[] OnEndUpdateMessage(System.IAsyncResult result) {
            this.EndUpdateMessage(result);
            return null;
        }
        
        private void OnUpdateMessageCompleted(object state) {
            if ((this.UpdateMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateMessageAsync(string msgID, string msgNm) {
            this.UpdateMessageAsync(msgID, msgNm, null);
        }
        
        public void UpdateMessageAsync(string msgID, string msgNm, object userState) {
            if ((this.onBeginUpdateMessageDelegate == null)) {
                this.onBeginUpdateMessageDelegate = new BeginOperationDelegate(this.OnBeginUpdateMessage);
            }
            if ((this.onEndUpdateMessageDelegate == null)) {
                this.onEndUpdateMessageDelegate = new EndOperationDelegate(this.OnEndUpdateMessage);
            }
            if ((this.onUpdateMessageCompletedDelegate == null)) {
                this.onUpdateMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateMessageCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateMessageDelegate, new object[] {
                        msgID,
                        msgNm}, this.onEndUpdateMessageDelegate, this.onUpdateMessageCompletedDelegate, userState);
        }
        
        public void DeleteMessage(string msgID) {
            base.Channel.DeleteMessage(msgID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteMessage(string msgID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteMessage(msgID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteMessage(System.IAsyncResult result) {
            base.Channel.EndDeleteMessage(result);
        }
        
        private System.IAsyncResult OnBeginDeleteMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string msgID = ((string)(inValues[0]));
            return this.BeginDeleteMessage(msgID, callback, asyncState);
        }
        
        private object[] OnEndDeleteMessage(System.IAsyncResult result) {
            this.EndDeleteMessage(result);
            return null;
        }
        
        private void OnDeleteMessageCompleted(object state) {
            if ((this.DeleteMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteMessageAsync(string msgID) {
            this.DeleteMessageAsync(msgID, null);
        }
        
        public void DeleteMessageAsync(string msgID, object userState) {
            if ((this.onBeginDeleteMessageDelegate == null)) {
                this.onBeginDeleteMessageDelegate = new BeginOperationDelegate(this.OnBeginDeleteMessage);
            }
            if ((this.onEndDeleteMessageDelegate == null)) {
                this.onEndDeleteMessageDelegate = new EndOperationDelegate(this.OnEndDeleteMessage);
            }
            if ((this.onDeleteMessageCompletedDelegate == null)) {
                this.onDeleteMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteMessageCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteMessageDelegate, new object[] {
                        msgID}, this.onEndDeleteMessageDelegate, this.onDeleteMessageCompletedDelegate, userState);
        }
        
        public void Reload() {
            base.Channel.Reload();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginReload(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReload(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndReload(System.IAsyncResult result) {
            base.Channel.EndReload(result);
        }
        
        private System.IAsyncResult OnBeginReload(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginReload(callback, asyncState);
        }
        
        private object[] OnEndReload(System.IAsyncResult result) {
            this.EndReload(result);
            return null;
        }
        
        private void OnReloadCompleted(object state) {
            if ((this.ReloadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReloadCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReloadAsync() {
            this.ReloadAsync(null);
        }
        
        public void ReloadAsync(object userState) {
            if ((this.onBeginReloadDelegate == null)) {
                this.onBeginReloadDelegate = new BeginOperationDelegate(this.OnBeginReload);
            }
            if ((this.onEndReloadDelegate == null)) {
                this.onEndReloadDelegate = new EndOperationDelegate(this.OnEndReload);
            }
            if ((this.onReloadCompletedDelegate == null)) {
                this.onReloadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReloadCompleted);
            }
            base.InvokeAsync(this.onBeginReloadDelegate, null, this.onEndReloadDelegate, this.onReloadCompletedDelegate, userState);
        }
    }
}
