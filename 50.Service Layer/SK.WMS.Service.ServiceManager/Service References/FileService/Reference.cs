//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NEXCORE.Service.ServiceManager.FileService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileService.IFileService")]
    public interface IFileService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/AppendChunk", ReplyAction="http://tempuri.org/IFileService/AppendChunkResponse")]
        void AppendChunk(string saveDirPath, string tempFileName, byte[] buffer, long Offset, int BytesRead);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/Write", ReplyAction="http://tempuri.org/IFileService/WriteResponse")]
        void Write(byte[] buffer, long Offset, int BytesRead, string param);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/DivideFile", ReplyAction="http://tempuri.org/IFileService/DivideFileResponse")]
        void DivideFile(string saveDirPath, string tempFileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/DownloadChunk", ReplyAction="http://tempuri.org/IFileService/DownloadChunkResponse")]
        byte[] DownloadChunk(string fullPath, long Offset, int BufferSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/FileView", ReplyAction="http://tempuri.org/IFileService/FileViewResponse")]
        string FileView(string RemoteFileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/GetFileSize", ReplyAction="http://tempuri.org/IFileService/GetFileSizeResponse")]
        long GetFileSize(string fullPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/RemoveFile", ReplyAction="http://tempuri.org/IFileService/RemoveFileResponse")]
        int RemoveFile(string tempFileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/DeleteDirectory", ReplyAction="http://tempuri.org/IFileService/DeleteDirectoryResponse")]
        int DeleteDirectory(string srcDir, bool isForce);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/CopyFile", ReplyAction="http://tempuri.org/IFileService/CopyFileResponse")]
        string CopyFile(string srcFile, string desFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/MoveFile", ReplyAction="http://tempuri.org/IFileService/MoveFileResponse")]
        string MoveFile(string srcFile, string desFile);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileServiceChannel : NEXCORE.Service.ServiceManager.FileService.IFileService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileServiceClient : System.ServiceModel.ClientBase<NEXCORE.Service.ServiceManager.FileService.IFileService>, NEXCORE.Service.ServiceManager.FileService.IFileService {
        
        public FileServiceClient() {
        }
        
        public FileServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AppendChunk(string saveDirPath, string tempFileName, byte[] buffer, long Offset, int BytesRead) {
            base.Channel.AppendChunk(saveDirPath, tempFileName, buffer, Offset, BytesRead);
        }
        
        public void Write(byte[] buffer, long Offset, int BytesRead, string param) {
            base.Channel.Write(buffer, Offset, BytesRead, param);
        }
        
        public void DivideFile(string saveDirPath, string tempFileName) {
            base.Channel.DivideFile(saveDirPath, tempFileName);
        }
        
        public byte[] DownloadChunk(string fullPath, long Offset, int BufferSize) {
            return base.Channel.DownloadChunk(fullPath, Offset, BufferSize);
        }
        
        public string FileView(string RemoteFileName) {
            return base.Channel.FileView(RemoteFileName);
        }
        
        public long GetFileSize(string fullPath) {
            return base.Channel.GetFileSize(fullPath);
        }
        
        public int RemoveFile(string tempFileName) {
            return base.Channel.RemoveFile(tempFileName);
        }
        
        public int DeleteDirectory(string srcDir, bool isForce) {
            return base.Channel.DeleteDirectory(srcDir, isForce);
        }
        
        public string CopyFile(string srcFile, string desFile) {
            return base.Channel.CopyFile(srcFile, desFile);
        }
        
        public string MoveFile(string srcFile, string desFile) {
            return base.Channel.MoveFile(srcFile, desFile);
        }
    }
}
